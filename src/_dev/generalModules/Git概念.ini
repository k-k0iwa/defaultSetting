Git概念
Gitでは, コードをコミットする前に, 変更したファイルを｢ステージ｣という領域に追加する必要があります.

ステージを使いこなすことで, 例えば｢AとBというファイルを更新したとき, 先にAを(ステージに追加して)コミットしてから, Bを(ステージに追加して)コミットする｣といった操作が出来るようになります. 一度に大量の変更を行う｢大きなコミット｣は, 後で見返した時に変更点が多く, コードを理解しにくくなります. ステージを利用して, 極力｢1コミット = 1作業(変更)｣にするよう, 心がけましょう.

----------------------------------------
◆プロジェクト開始時
git init
で初期化する

◆作業ステップ
ファイルを編集したらステージに追加
git add ファイル名
※複数のファイルを同時にステージに追加する場合,、
git add -A
でリポジトリ内部の変更が行われた全ファイルをステージに追加する

コミットする
git commit -m "コミットメッセージ"

リモートリポジトリの登録（最初だけ）
git remote add リモートリポジトリ名 URL
※リモートリポジトリ名は一般的に「origin」と命名されたりする
※登録の前にリモートリポジトリが作成されている必要がある

リモートリポジトリにファイルをアップロードする（プッシュ）
git push リモートリポジトリ名 master

◆自分が触ったファイルの確認
作業ファイルの把握
git status
※自分が変更したファイルのファイル名を表示できる
※変更されたファイルは赤色で表示される
※どのファイルをaddしたか忘れた時にも使える！

変更内容の把握
git diff
※変更内容は緑色で表示される
※コードを書き換えたところは変更前が赤色、変更後が緑色で表示される
※git diffの終了はqキー

上記2点を確認の上、git addを実行するのが通常フロー



◆途中から参入する時や、作業に入る前に
リモートリポジトリのファイルをダウンロードする（プル）
git pull リモートリポジトリ名 master


◆コミットログの確認
git log

変更内容も確認したい場合
git log -p

※表示内容が多い時は、上下キーを使うと表示範囲を変えられて、Qキーを押すことで終了できる

----------------------------------------
1.リポジトリを作成
既存のコードを新たにGitでバージョン管理したい場合
git init
でリポジトリを作成する

既存のリポジトリから新たに自分用のリポジトリを作成する場合
git clone

